ORDER OF PRIORITIES
    Save files
        Option to delete a save
    Areas
        Store altitude and other properties
    Weather
        Make conditions not random
    Locations
        Moving between locations within areas
        Entering "coordinates" to travel to a given location
    Activities / Items
        Figure out a data / model structure for the different kinds of both
    Content, content, content!
        Iitem and activity generation within locations




ITEMS
    Trees
        Some of them you can climb
        Some have fruit you can harvest
        Some you can fell to gather timber
        Some you can gather sap from (to be used as glue)
Shrubs
    Berries
    Animals can hide in them
Herbs
    You can harvest herbs


CHATACTER CREATION
    A choice of regions to start in. Show region descriptions on this screen: more prominent weather, temperatures, etc.


GAMEPLAY
    TIME/DATE | WEATHER, NAME | $GOLD | REGION > AREA @LOCATION_COORD
    Current situation genrated by Area, taking into account time, season, weatherm etc.
    1.) Explore
    2.) Rucksack
    3.) Map



RUCKSACK
    A lit of items you are currently carrying, and how encumbered you are
    1.) use
        list useable items in rucksack
    2.) drop
        lists items, and selecting one removed it from your inventory


WEAPONS / EQUIPABLES / ENHANCEABLES
    These items cap an enhancement cap. Each enhancement item (herbs, poisons, etc.) has a cost associated, which goes towards the enhancement count. Once an item reaches its cap, it can not be any futher enhanced.


MAP
    Graphical representation of the region's areas
    1.) world map
        Displays a graphical representation of all regions within the world
    2.) Area information
        renders long descriptions for region, area, including any cultural info like sttlements, festicals, races, etc, wars, etc


SETTLEMENTS
    type: village, town, city
    NPCs
    festivals at certain times of year
    markets / shops
    Schools / training
    jobs
    Notice board
    pubs
    carraiges to take you to other settlements in the region / different regions


PLOTS
    You can purchase a plot
    Build a house, a farm, etc


LOCATIONS
    Each area has a list of locations containing a list of Interctives.
    Locations can generate random Interactives (via a service) based of the area's properties (temperature, altitude), current weather
    We also need to be able to explicityelt put content there
    Areas need properties to support this:
        biome
        altitude

ACTIVITIES
    Activities have a type and a duration
    types of activities: duration (#), interactive (*)
    Types:
        GATHERING #
        HUNTING *
        COMBAT *
        TRAVEL #
        FISHING *
        CRAFTING #
        MINING *
        LOGGING *
        EVENT * (perhaps event are their own thing)
        CONVERSATION *
        STEALING *
        SPYING *
        SLEEP #


ITEMS ISSUE
    extant items can exist in three ways: equipped by the player, in the player's rucksack, or in a storage location
    Need to figute out a save format for these items and where they are currently stored. Perhaps a randomly generated id in an extantItems list[dict] in the save file.

    We also have the items / activities that have been generated by visiting a location (gets refreshed after three days). Also need to find a method of storing these (very much separate from the above items).


SAVE FORMAT
    meta: {
        buildVersion: int
        version: int
        createdAt: str
    }
    player: {
        name: str
        totalHealth: int
        health: int
        totalEnergy: int
        energy: int
        equipped: [{
            item: str (ref to extantItems.id)
            slot: str (one of: HEAD, TORSO, LEG, HAND, ACCESSORY)
        }]
        rucksack
            gold: int
            items: [{
                item: str (ref to extantItems.id)
            }]
    }
    clock: {
        minute: int
        hour: int
        day: int
        season: int
        year: int
    }
    weatherConditions: [{
        area: str,
        conditions: str,
        dayCreated: int,
    }]
    locationItems: list[dict]
        {
            item: str (ref to extantItems.id)
            area: str
            location: int
            dayCreated: int
        }
    npc: list[dict]
    storageLocations: {
        area: str
        location: int
        items: [{
            item: str (ref to extantItems.id)
        }]
    }
    extantItems: [{
        id: str (random)
        item: str (ref to items data)
        properties: {
            (arbitrary formatted dict unique to each item type)
        }
    }]


